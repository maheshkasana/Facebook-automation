class node():
    def __init__(self):
        self.data = -1
        self.left = None
        self.right = None
        self.left_flag = 0
        self.right_flag = 0

def add_node_tree_ask(temp,data):
    if temp == None:
        temp = node()
        temp.data = data
        return temp
    else:
        print("LRFT_CHILD : 1\tRIGHT_CHILD : 2 OF NODE : ",temp.data)
        ch = int(input())
        if ch == 1:
            temp.left =  add_node_tree_ask(temp.left, data)
        else:
            temp.right =  add_node_tree_ask(temp.right, data)
    return temp

    
def create_Binary_tree_ask():
    root = None
    temp = None
    n = int(input("\nTotal Nodes' : "))
    while n>0:
        data = int(input("Enter Data : "))
        root = add_node_tree_ask(root, data)            
        n -= 1
    return root


def print_preorder_tree(root):
    if root == None:
        return
    print(root.data,end='\t')
    print_preorder_tree(root.left)
    print_preorder_tree(root.right)


def print_inorder_tree(root):
    if root == None:
        return
    print_inorder_tree(root.left)
    print(root.data,end='\t')
    print_inorder_tree(root.right)

def print_postorder_tree(root):
    if root == None:
        return
    print_postorder_tree(root.left)
    print_postorder_tree(root.right)
    print(root.data,end='\t')
    


def print_tree(root):
    if root == None:
        print("****Empty Tree****")
        return
    print("\nPre Order Traversal : ")
    print_preorder_tree(root)
    print("\nIn Order Traversal : ")
    print_inorder_tree(root)
    print("\nPost Order Traversal : ")
    print_postorder_tree(root)


def add_node_delimiter(arr, ind, n):
    if ind>= n or arr[ind] == -1:
        ind += 1
        return None, ind
    else:
        temp = node()
        temp.data = arr[ind]
        ind += 1
        temp.left, ind =add_node_delimiter(arr, ind, n)
        temp.right, ind =add_node_delimiter(arr, ind, n)
        return temp, ind
    
    


def create_Binary_tree_delimiter():
    inorder_array = list(map(int, input("\nEnter Inorder : ").split(' ')))
    root, ind = add_node_delimiter(inorder_array,0, len(inorder_array))
    return root



def add_node_heap_form_array(arr, ind, n):
    if ind >= n or arr[ind] == -1:
        return None
    else:
        temp = node()
        temp.data = arr[ind]
        temp.left = add_node_heap_form_array(arr, 2*ind+1, n)
        temp.right =add_node_heap_form_array(arr, 2*ind+2, n)
        return temp
    

def create_Binary_tree_heap_form_array():
    arr = list(map(int, input("\nEnter Array : ").split(' ')))
    root = add_node_heap_form_array(arr, 0, len(arr))
    return root


def binary_search(arr , data, s, l):
    if s>l:
        return -1
    if s==l:
        if arr[s] == data:
            return s
        else:
            return -1
    k = int((s+l)/2)
    if arr[k] == data:
        return k
    if arr[k] > data:
        return binary_search(arr , data, s, k-1)
    else:
        return binary_search(arr , data, k+1, l)
        



def add_node_in_pre_order(in_ord, pre_ord, ii,ij, pi, pj):
    if ii > ij or pi > pj:
        return None
    temp = node()
    temp.data = pre_ord[pi]
    k = binary_search(in_ord, pre_ord[pi], ii, ij)
    if k == -1:
        return None
    le = k - ii
    temp.left = add_node_in_pre_order(in_ord, pre_ord, ii, k-1, pi+1, pi+le)
    temp.right = add_node_in_pre_order(in_ord, pre_ord, k+1, ij,pi+1+le, pj)
    return temp
    
    
def create_Binary_tree_in_pre_order():
    in_ord = list(map(int, input("\nEnter Inorder : ").split(' ')))
    pre_ord = list(map(int, input("Enter Preorder : ").split(' ')))
    n = len(in_ord)
    if n != len(pre_ord):
        print("\nEnter Proper In & Pre order Traversals")
        return None
    return add_node_in_pre_order(in_ord, pre_ord, 0,n-1, 0, n-1)
    
    



def add_node_in_post_order(in_ord, post_ord, ii,ij, pi, pj):
    if ii > ij or pi > pj:
        return None
    temp = node()
    temp.data = post_ord[pj]
    k = binary_search(in_ord, post_ord[pj], ii, ij)
    if k == -1:
        return None
    le = k - ii
    temp.left = add_node_in_post_order(in_ord, post_ord, ii, k-1, pi, pi+le-1)
    temp.right = add_node_in_post_order(in_ord, post_ord, k+1, ij,pi+le, pj-1)
    return temp
    
    
def create_Binary_tree_in_post_order():
    in_ord = list(map(int, input("\nEnter Inorder : ").split(' ')))
    post_ord = list(map(int, input("Enter Postorder : ").split(' ')))
    n = len(in_ord)
    if n != len(post_ord):
        print("\nEnter Proper In & Post order Traversals")
        return None
    return add_node_in_post_order(in_ord, post_ord, 0,n-1, 0, n-1)





def main_tree_creation():
    #root = create_Binary_tree_ask()
    #root = create_Binary_tree_delimiter()
    #root = create_Binary_tree_heap_form_array() # root = n, LC = 2*n+1 and RC = 2*n+2
    #root = create_Binary_tree_in_pre_order() #we have give in order and pre order traversal we need to create the tree 
    #root = create_Binary_tree_in_post_order() #we have give in order and post order traversal we need to create the tree 
    print_tree(root)
            
            
            
#------------------------------------####-------------------------------------#
#------------------------------------####-------------------------------------#
def get_max_depth(root):
    if root == None:
        return 0
    return 1+max(get_max_depth(root.left), get_max_depth(root.right))


def print_level_element(root,i):
    if root == None:
        return
    if i == 1:
        print(root.data,end=' ')
    print_level_element(root.left,i-1)
    print_level_element(root.right,i-1)
    


def level_order_traversal(root):
    max_depth = get_max_depth(root)
    for i in range(1, max_depth+1,1):
        print_level_element(root,i)
        print('\n')
    


def level_order_traversal_queue(root):
    if root == None:
        return
    temp = []
    temp.append(root)
    while len(temp)>0:
        tmp = temp.pop(0)
        print(tmp.data,end=' ')
        if tmp.left != None:
            temp.append(tmp.left)
        if tmp.right != None:
            temp.append(tmp.right)
        

def inorder_without_recursion(root):
    stc = []
    if root == None:
        return
    cur = root.left
    stc.append(root)
    while len(stc)>0:
        if cur ==None:
            cur = stc.pop(len(stc)-1)
            print(cur.data, end=' ')
            cur = cur.right
        if cur != None:
            stc.append(cur)
            cur = cur.left

def create_threads(root, L, R):
    if root ==None:
        return
    if root.left!=None:
        create_threads(root.left, L, root)
    else:
        root.left = L
        if L!=None:
            root.left_flag = 1
    if root.right!=None:
        create_threads(root.right, root, R)
    else:
        root.right = R
        if R!=None:
            root.right_flag = 1



def print_level_thread(root,i):
    if root == None:
        return
    if i == 1:
        print("[",root.left_flag,",",root.right_flag,"]",end='  ')
    if root.left_flag != 1:
        print_level_thread(root.left,i-1)
    if root.right_flag != 1:
        print_level_thread(root.right,i-1)
    


def print_thread_connection_levelwise(root,n):
    for i in range(1, n+1,1):
        print_level_thread(root,i)
        print('\n')
    
    
    
        
def inorder_without_recursion_without_stack(root):
    #max_depth = get_max_depth(root)
    create_threads(root, None, None)
    #print_thread_connection_levelwise(root,max_depth)
    p = root
    while p!=None:
        while p.left!=None and p.left_flag == 0:
            p = p.left
        print(p.data,end=' ')
        while p.right_flag == 1:
            p = p.right
            print(p.data,end = ' ')
        p = p.right
    

def main():
    root = create_Binary_tree_heap_form_array()
    #level_order_traversal(root)
    #level_order_traversal_queue(root)
    #inorder_without_recursion(root)
    inorder_without_recursion_without_stack(root)
    #print_tree(root)
    
    
if __name__ == "__main__":
    while True:
        main()
