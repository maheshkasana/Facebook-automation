#include <iostream>
#include <list>
#include <tuple>
#include <vector>
using namespace std;

int main() {
    int t;
    scanf("%d",&t);
    //printf("T : %d\n",t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
     //printf("N : %d\n",n);
     vector<pair<int,int> > sg_lst;     
     for(int i=0;i<n;i++)
     {
         int x,y;
         scanf("%d%d",&x,&y);
         sg_lst.push_back(make_pair(x,y));
     }
     //for(int i=0;i<sg_lst.size();i++)
       //printf("%d,%d\n",sg_lst[i].first,sg_lst[i].second);
    int q;
    scanf("%d",&q);
    //printf("Q : %d\n",q);
    while(q--)
    {
        int xn;
        scanf("%d",&xn);
        //printf("XN : %d\n",xn);
        vector<int> xn_lst;
        for(int j = 0; j<xn;j++)
        {
            int x;
            scanf("%d",&x);
            xn_lst.push_back(x);
        }
        //for(int j = 0; j<xn_lst.size(); j++)
            //printf("%d,",xn_lst[j]);
        //printf("\n");
        
        
        
    }
     
    
        
        
    }
    
	return 0;
}



#include <iostream>
#include <vector>
using namespace std;

int findEqualGreter(vector<int> arr, int n, int target)
{
    if (target <= arr[0])
        return 0;
    if (target == arr[n - 1])
        return n-1;
    if (target > arr[n - 1])
        return n;

    int i = 0, j = n, mid = 0;
    while (i < j)
    {
        mid = (i + j) / 2;
        if (arr[mid] == target)
            return mid;
        if (target < arr[mid])
        {
            if (mid > 0 && target > arr[mid - 1])
                return mid;
            j = mid;
        }
        else
        {
            if (mid < n - 1 && target < arr[mid + 1])
                return mid+1;
            i = mid + 1; 
        }
    }
   return mid;
}


int findEqualLess(vector<int> arr, int n, int target)
{
    if (target == arr[0])
        return 0;
    if (target < arr[0])
        return -1;
    if (target >= arr[n - 1])
        return n-1;
    int i = 0, j = n, mid = 0;
    while (i < j)
    {
        mid = (i + j) / 2;
        if (arr[mid] == target)
            return mid;
        if (target < arr[mid])
        {
            if (mid > 0 && target > arr[mid - 1])
                return mid-1;
            j = mid;
        }
        else
        {
            if (mid < n - 1 && target < arr[mid + 1])
                return mid;
            i = mid + 1; 
        }
    }
   return mid;
}


 
int main() {
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        vector<pair<int,int> > sg_lst;     
        for(register int i=0;i<n;i++)
        {
             int x,y;
            scanf("%d%d",&x,&y);
            sg_lst.push_back(make_pair(x,y));
        }
        int q;
        scanf("%d",&q);
        while(q--)
        {
            int xn;
            scanf("%d",&xn);
            vector<int> xn_lst;
            for(register int j = 0; j<xn;j++)
            {
                int x;
                scanf("%d",&x);
                xn_lst.push_back(x);
            }
            int ts = 0;
            
            for(register int i = 0; i<n;i++)
            {   
                //printf("D %d : C %d\n",sg_lst[i].second,xn_lst[findClosest(xn_lst,xn,sg_lst[i].second)]);
                //printf("D %d : C %d\n",sg_lst[i].first,xn_lst[findClosest(xn_lst,xn,sg_lst[i].first)]);
                int li,ri;
                ri = findEqualLess(xn_lst,xn,sg_lst[i].second);
                li = findEqualGreter(xn_lst,xn,sg_lst[i].first);
                //printf("%d , %d : li : %d, ri : %d\n",sg_lst[i].first,sg_lst[i].second,li,ri);
                int cn = ri-li+1;
                if(cn%2 !=0 && cn>=0)
                    ts+=1;
            }
            printf("%d\n",ts);
        }
    }
	return 0;
}
